{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport Axios from 'axios'; // import { Message } from 'antd'\n\nvar cancel,\n    promiseArr = {};\nvar CancelToken = Axios.CancelToken;\nvar axios = Axios.create({\n  // 10秒请求超时\n  timeout: 1000,\n  // `withCredentials` 表示跨域请求时是否需要使用凭证\n  withCredentials: false,\n  // `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json',\n  responseEncoding: 'utf8',\n  // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n}); // 请求拦截器\n\naxios.interceptors.request.use(function (config) {\n  console.log(cancel);\n\n  if (promiseArr[config.url]) {\n    promiseArr[config.url]('操作取消');\n    promiseArr[config.url] = cancel;\n    console.error('请求多次提交');\n  } else {\n    promiseArr[config.url] = cancel;\n    console.log(cancel);\n  }\n\n  return config;\n}, function (error) {\n  return _Promise.reject(error);\n}); // 响应拦截器\n\naxios.interceptors.response.use(function (res) {\n  console.log(res);\n  return res;\n}, function (error) {\n  var errorMsg;\n\n  if (error && error.response) {\n    var status = error.response.status;\n\n    switch (status) {\n      case 400:\n        errorMsg = error.response.data.msg;\n        break;\n\n      case 401:\n        errorMsg = '请求要求用户的身份认证';\n        break;\n\n      case 402:\n        errorMsg = '保留将来使用';\n        break;\n\n      case 403:\n        errorMsg = '请求被服务端拒绝';\n        break;\n\n      case 404:\n        errorMsg = '请求资源无法找到';\n        break;\n\n      case 405:\n        errorMsg = '请求方法被禁止';\n        break;\n\n      case 406:\n        errorMsg = '服务端无法根据客户端请求的内容特性完成请求';\n        break;\n\n      case 407:\n        errorMsg = '应当使用代理进行授权';\n        break;\n\n      case 408:\n        errorMsg = '请求时间过长';\n        break;\n\n      case 500:\n        errorMsg = '服务端内部错误';\n        break;\n\n      case 501:\n        errorMsg = '服务端不支持请求的功能';\n        break;\n\n      case 502:\n        errorMsg = '无效的响应';\n        break;\n\n      case 503:\n        errorMsg = '超载或系统维护无法处理请求';\n        break;\n\n      case 505:\n        errorMsg = '服务器不支持请求的HTTP协议的版本';\n        break;\n\n      default:\n        break;\n    }\n  } else {\n    errorMsg = '连接服务器失败';\n  }\n\n  console.error(errorMsg);\n  return _Promise.reject(error);\n});\nexport default {\n  get: function get(url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return axios({\n      method: 'GET',\n      url: url,\n      data: data,\n      params: params,\n      cancelToken: new CancelToken(function (c) {\n        cancel = c;\n      })\n    }).then(function (res) {\n      return _Promise.resolve(res.data);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/kite/sub/react/ynode/common/js/axios.js"],"names":["Axios","cancel","promiseArr","CancelToken","axios","create","timeout","withCredentials","responseType","responseEncoding","validateStatus","status","interceptors","request","use","config","console","log","url","error","reject","response","res","errorMsg","data","msg","get","params","method","cancelToken","c","then","resolve"],"mappings":"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","sourcesContent":["import Axios from 'axios'\n// import { Message } from 'antd'\n\nlet cancel,\n  promiseArr = {}\n\nconst CancelToken = Axios.CancelToken\n\nconst axios = Axios.create({\n  // 10秒请求超时\n  timeout: 1000,\n\n  // `withCredentials` 表示跨域请求时是否需要使用凭证\n  withCredentials: false,\n\n  // `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json',\n\n  responseEncoding: 'utf8',\n\n  // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte\n  validateStatus: function (status) {\n    return status >= 200 && status < 300\n  }\n})\n\n// 请求拦截器\naxios.interceptors.request.use(\n  function (config) {\n    console.log(cancel)\n    if (promiseArr[config.url]) {\n      promiseArr[config.url]('操作取消')\n      promiseArr[config.url] = cancel\n      console.error('请求多次提交')\n    } else {\n      promiseArr[config.url] = cancel\n      console.log(cancel)\n    }\n    return config\n  },\n  function (error) {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\naxios.interceptors.response.use(\n  res => {\n    console.log(res)\n    return res\n  },\n  error => {\n    let errorMsg\n    if (error && error.response) {\n      const status = error.response.status\n      switch (status) {\n        case 400:\n          errorMsg = error.response.data.msg\n          break\n        case 401:\n          errorMsg = '请求要求用户的身份认证'\n          break\n        case 402:\n          errorMsg = '保留将来使用'\n          break\n        case 403:\n          errorMsg = '请求被服务端拒绝'\n          break\n        case 404:\n          errorMsg = '请求资源无法找到'\n          break\n        case 405:\n          errorMsg = '请求方法被禁止'\n          break\n        case 406:\n          errorMsg = '服务端无法根据客户端请求的内容特性完成请求'\n          break\n        case 407:\n          errorMsg = '应当使用代理进行授权'\n          break\n        case 408:\n          errorMsg = '请求时间过长'\n          break\n        case 500:\n          errorMsg = '服务端内部错误'\n          break\n        case 501:\n          errorMsg = '服务端不支持请求的功能'\n          break\n        case 502:\n          errorMsg = '无效的响应'\n          break\n        case 503:\n          errorMsg = '超载或系统维护无法处理请求'\n          break\n        case 505:\n          errorMsg = '服务器不支持请求的HTTP协议的版本'\n          break\n        default:\n          break\n      }\n    } else {\n      errorMsg = '连接服务器失败'\n    }\n    console.error(errorMsg)\n    return Promise.reject(error)\n  }\n)\n\nexport default {\n  get(url, data = {}, params = {}) {\n    return axios({\n      method: 'GET',\n      url,\n      data,\n      params,\n      cancelToken: new CancelToken(c => {\n        cancel = c\n      })\n    }).then(res => {\n      return Promise.resolve(res.data)\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}